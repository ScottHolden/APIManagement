<policies>
    <inbound>
        <base />
        <!-- Set the expected api key. This could be pulled in as a named value, eg, {{ExpectedApiKey}}  -->
        <set-variable name="expectedApiKey" value="abc123" />

        <!-- Check if the the api key is valid -->
        <choose>
            <when condition="@{
                // Pull out our expected key from the variable above
                string expectedKey = context.Variables.GetValueOrDefault("expectedApiKey", "");

                // Pull the provided key from the Request query string
                string providedKey = context.Request.OriginalUrl.Query.GetValueOrDefault("apikey", "");

                // Check if either is empty, of if they don't match
                return string.IsNullOrWhiteSpace(expectedKey) ||
                        string.IsNullOrWhiteSpace(providedKey) ||
                        !expectedKey.Equals(providedKey, StringComparison.Ordinal);
                }">

                <!-- If it's a bad key, return a 403 -->
                <return-response>
                    <set-status code="403" reason="Unauthorised" />
                </return-response>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
